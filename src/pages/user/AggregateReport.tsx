import React, { useState } from "react";
import axios from "axios";
import toast, { Toaster } from "react-hot-toast";
import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "pdfmake/build/vfs_fonts";

// Set pdfMake vfs correctly
pdfMake.vfs = pdfFonts;

export default function AggregateReport() {
  const [month, setMonth] = useState<number | "">("");
  const [report, setReport] = useState<{ totalUnits: number; totalAmount: number } | null>(null);
  const [loading, setLoading] = useState(false);

  const months = [
    { value: 1, label: "January" },
    { value: 2, label: "February" },
    { value: 3, label: "March" },
    { value: 4, label: "April" },
    { value: 5, label: "May" },
    { value: 6, label: "June" },
    { value: 7, label: "July" },
    { value: 8, label: "August" },
    { value: 9, label: "September" },
    { value: 10, label: "October" },
    { value: 11, label: "November" },
    { value: 12, label: "December" },
  ];

  const fetchReport = async () => {
    if (month === "") {
      toast.error("Please select a month");
      return;
    }
    setLoading(true);
    try {
      const res = await axios.get(`http://localhost:5555/api/bills/aggregate/${month}`);
      setReport(res.data);
    } catch (error) {
      toast.error("Failed to fetch report");
    } finally {
      setLoading(false);
    }
  };

  const printPDF = () => {
    if (!report) return;

    const docDefinition = {
      content: [
        { text: "Monthly Aggregate Report", style: "header", alignment: "center" },
        { text: `Month: ${months.find((m) => m.value === month)?.label}`, style: "subheader", margin: [0, 10, 0, 10] },
        {
          table: {
            headerRows: 1,
            widths: ["*", "*"],
            body: [
              [{ text: "Total Units", style: "tableHeader" }, { text: "Total Amount (TZS)", style: "tableHeader" }],
              [report.totalUnits.toString(), report.totalAmount.toLocaleString()],
            ],
          },
          layout: "lightHorizontalLines",
          margin: [0, 10, 0, 0],
        },
        { text: "Generated by ZAWA Billing System", style: "footer", margin: [0, 30, 0, 0] },
      ],
      styles: {
        header: { fontSize: 20, bold: true },
        subheader: { fontSize: 14 },
        tableHeader: { bold: true, fillColor: "#4CAF50", color: "white", fontSize: 12 },
        footer: { fontSize: 10, italics: true, alignment: "center" },
      },
    };

    pdfMake.createPdf(docDefinition).download(`Monthly_Report_${month}.pdf`);
  };

  return (
    <div
      style={{
        maxWidth: 500,
        margin: "100px auto",
        padding: 20,
        backgroundColor: "white",
        borderRadius: 8,
        boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
      }}
    >
      <Toaster position="top-center" reverseOrder={false} />
      <h2>Aggregate Monthly Report</h2>

      <label style={{ fontWeight: "bold", display: "block", marginBottom: 6 }}>Select Month:</label>
      <select
        value={month}
        onChange={(e) => setMonth(e.target.value === "" ? "" : Number(e.target.value))}
        style={{
          width: "100%",
          padding: 8,
          marginBottom: 10,
          borderRadius: 4,
          border: "1px solid #ccc",
        }}
      >
        <option value="">-- Select Month --</option>
        {months.map((m) => (
          <option key={m.value} value={m.value}>
            {m.label}
          </option>
        ))}
      </select>

      <button
        onClick={fetchReport}
        style={{
          width: "100%",
          padding: 10,
          marginBottom: 20,
          backgroundColor: "#4CAF50",
          color: "white",
          border: "none",
          borderRadius: 4,
          cursor: "pointer",
        }}
      >
        Get Report
      </button>

      {loading && <p>Loading...</p>}

      {report && (
        <div style={{ marginBottom: 20 }}>
          <p>
            <strong>Total Units:</strong> {report.totalUnits}
          </p>
          <p>
            <strong>Total Amount:</strong> {report.totalAmount.toLocaleString()} TZS
          </p>
          <button
            onClick={printPDF}
            style={{
              padding: 10,
              backgroundColor: "#2196F3",
              color: "white",
              border: "none",
              borderRadius: 4,
              cursor: "pointer",
            }}
          >
            Print PDF
          </button>
        </div>
      )}
    </div>
  );
}
